on:
  workflow_call:
    inputs:
      directory:
        required: false
        type: string
        description: Directory of the terraform root module. Defaults to the root of the repo
        default: './'
      
      prevent_old_runs:
        required: false
        type: boolean
        default: false
        description: >
          When enabled the terraform apply job will fail if it detects more recent workflow runs. This should prevent
          resources from being accidently destroyed when re-running a workflow on an older commit.        
        
      tf_apply_branch:
        required: true
        type: string
        description: The branch that is being deployed
        default: main
        
      mutex-branch:
        required: false
        type: string
        description: |
          Branch name to use for the terraform workflow mutex functionality. When specified all workflow runs are queued and executed
          in the order they were dispatched. This functionality uses a git branch with an unrelated history to orchestrate the queue.
        
      environment: 
        required: false
        type: string
        description: "The GitHub environment being deployed to"
        
    secrets:
      AZURE_TENANT_ID:
        required: true
        description: "The Tenant ID in which the Subscription exists."
      AZURE_CLIENT_ID:
        required: true
        description: "The Client ID of the Service Principal used by Terraform."
      AZURE_CREDENTIALS:
        required: false
        description: "The Azure credentials json object for authentication."
      AZURE_CLIENT_SECRET:
        required: false
        description: "The Client Secret of the Service Principal."
      AZURE_SUBSCRIPTION_ID:
        required: true
        description: "The Subscription ID in which the Terraform state storage account exists."
      GH_READ_TOKEN: 
        required: false
        description: "The GitHub token to use for the run"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    defaults:
      run:
        working-directory: ${{inputs.directory}}
    
    env:
      ARM_USE_OIDC: ${{inputs.environment != '' && 'true' || 'false'}}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
        
      - name: Set up mutex
        if: inputs.mutex-branch != ''
        uses: ben-z/gh-action-mutex@v1.0-alpha-7
        with:
          branch: ${{ inputs.mutex-branch }}
        
      - run: |
          pwd
          ls
          
          if [ -z "${{secrets.AZURE_CREDENTIALS}}" ]
          then
                echo "USE_AZURE_CREDENTIALS=false" >> $GITHUB_ENV
                echo "az login will use OIDC"
          else
                echo "USE_AZURE_CREDENTIALS=true" >> $GITHUB_ENV
                echo "az login will use AZURE_CREDENTIALS env var"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Log in to Azure using credentials secret
        if: env.USE_AZURE_CREDENTIALS == true
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to Azure using OIDC
        if: env.USE_AZURE_CREDENTIALS != true
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Terraform Format Check
        continue-on-error: false
        run: terraform fmt -check
      
      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        name: Update Pull Request
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Fail for out-of-date workflow run
        if: inputs.prevent_old_runs == true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Gets the object representing this workflow run
          workflowRunObj=$(gh api -H "Accept: application/vnd.github+json" '/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}' | jq '.')
          
          echo "::group::Current workflow run"
          echo "$workflowRunObj"
          echo "::endgroup::"
          
          workflowId=$(echo $workflowRunObj | jq '.workflow_id' -r)
          workflowRunNumber=$(echo $workflowRunObj | jq '.run_number' -r)
          
          # Gets the workflow runs for this workflow
          workflowRuns=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/actions/workflows/$workflowId/runs)
          
          # Gets the filtered runs for this workflow that pushed to the apply branch - as we don't care about pull request tf plan runs
          latestRuns="$(echo $workflowRuns | jq '.workflow_runs | map(select(.event == "push" and .head_branch == "${{inputs.tf_apply_branch}}") ) | map ({id, run_number, display_title, run_started_at, run_attempt, event, head_branch})')"
          
          echo "::group::Latest workflow runs"
          echo "$latestRuns"
          echo "::endgroup::"
          
          # Get the latest run object
          latestRunObj=$(echo $latestRuns | jq 'max_by(.run_number)')
          
          echo "::group::Latest workflow run"
          echo "$latestRunObj"
          echo "::endgroup::"
          
          latestRunNumber=$(echo $latestRunObj | jq '.run_number' -r)
          
          if [[ "$latestRunNumber" == "$workflowRunNumber" ]]; then
              echo "Confirmed this is the latest workflow run"
          else
              echo "::error::Detected a more recent workflow run. Exiting with failure to prevent out of date commits being applied"
              echo ":warning: Failing terraform apply workflow as a more recent workflow run exists" >> $GITHUB_STEP_SUMMARY
              exit 1
          fi

      - name: Terraform Apply
        if: (format('refs/heads/{0}', inputs.tf_apply_branch) == github.ref && github.event_name == 'push')
        run: |
          echo "ref  ${{ github.ref }}"
          pwd
          terraform apply -auto-approve -input=false
