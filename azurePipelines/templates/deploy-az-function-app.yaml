parameters:
  - name: environmentName
    displayName: Environment Name
    type: string
    
  - name: serviceConnection
    displayName: Service Connection Name
    type: string
    
  - name: functionAppName
    displayName: Function App Name
    type: string

  - name: adAppIdUri
    displayName: AAD App Id Uri
    type: string

  - name: runtimeStack
    displayName: Runtime Stacak
    type: string
    default: DOTNET|6.0

  - name: appSettings
    displayName: Application Settings
    type: string
    default: ''

  - name: postmanCollection
    displayName: Postman Collection File Path
    type: string
    default: ''

  - name: postmanArgs
    displayName: Postman Extra Command Line Args
    type: string
    default: ''
    
jobs:  
  - deployment: Deploy
    displayName: 'Deploy ${{ parameters.environmentName }}'
    environment: ${{ parameters.environmentName }}
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            # Deploy the function
          - task: AzureFunctionApp@2
            displayName: 'Azure App Service Deploy'
            inputs:
              azureSubscription: '${{ parameters.serviceConnection }}'
              appType: 'functionAppLinux'
              appName: '${{ parameters.functionAppName }}'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              runtimeStack: ${{ parameters.runtimeStack }}
              appSettings: '${{ parameters.appSettings }}'

            # Checkout repo so we can get postman colletion file. Release pipelines dont automatically checkout the repo
          - checkout: self

            # Get an access token for the deployed function app allowing us to authenticate with ad and run tests
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              scriptType: 'inlineScript'
              inline: |
                Import-Module Az.Accounts
                $access_token = (Get-AzAccessToken -ResourceUrl ${{parameters.adAppIdUri}}).Token
                Write-Host "##vso[task.setvariable variable=AzureAccessToken;issecret=true]$access_token"
              azurePowerShellVersion: 'latestVersion'

          - script: |
              npm install newman
            displayName: Install Newman
            
          - script: |
              newman run ${{ parameters.postmanCollection }} ${{parameters.postmanArgs}} --global-var "AccessToken=$(AzureAccessToken)"
            displayName: Perform Postman Integration Tests
            condition: and(succeeded(), ne('${{ parameters.postmanCollection }}', ''), ne('${{ parameters.postmanCollection }}', 'null'))